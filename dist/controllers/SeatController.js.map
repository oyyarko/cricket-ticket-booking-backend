{"version":3,"sources":["../../controllers/SeatController.js"],"names":["BlockModel","require","SeatModel","io","module","exports","Seats","req","res","next","blockId","params","seats","find","block","json","error","status","message","SelectSeats","selectedSeats","body","Array","isArray","findById","seatSelection","length","row","col","findOneAndUpdate","emit"],"mappings":"AAAA,MAAMA,aAAaC,QAAQ,sBAAR,CAAnB;AACA,MAAMC,YAAYD,QAAQ,qBAAR,CAAlB;AACA,MAAM,EAAEE,EAAF,KAASF,QAAQ,kBAAR,CAAf;;AAEAG,OAAOC,OAAP,CAAeC,KAAf,GAAuB,OAAOC,GAAP,EAAYC,GAAZ,EAAiBC,IAAjB,KAA0B;AAC/C,QAAMC,UAAUH,IAAII,MAAJ,CAAWD,OAA3B;AACA,MAAI;AACF,UAAME,QAAQ,MAAMV,UAAUW,IAAV,CAAe;AACjCC,aAAOJ;AAD0B,KAAf,CAApB;AAGAF,QAAIO,IAAJ,CAASH,KAAT;AACAH;AACD,GAND,CAME,OAAOO,KAAP,EAAc;AACdR,QAAIS,MAAJ,CAAW,GAAX,EAAgBF,IAAhB,CAAqB,EAAEG,SAASF,MAAME,OAAjB,EAArB;AACD;AACF,CAXD;;AAaAd,OAAOC,OAAP,CAAec,WAAf,GAA6B,OAAOZ,GAAP,EAAYC,GAAZ,EAAiBC,IAAjB,KAA0B;AACrD,MAAI;AACF,UAAMW,gBAAgBb,IAAIc,IAA1B;AACA,UAAMX,UAAUH,IAAII,MAAJ,CAAWD,OAA3B;AACA,QAAI,CAACY,MAAMC,OAAN,CAAcH,aAAd,CAAL,EAAmC;AACjC,aAAOZ,IAAIS,MAAJ,CAAW,GAAX,EAAgBF,IAAhB,CAAqB;AAC1BG,iBAAS;AADiB,OAArB,CAAP;AAGD;AACD,UAAMJ,QAAQ,MAAMd,WAAWwB,QAAX,CAAoBd,OAApB,CAApB;AACA,QAAI,CAACI,KAAL,EAAY;AACV,aAAON,IAAIS,MAAJ,CAAW,GAAX,EAAgBF,IAAhB,CAAqB,EAAEG,SAAS,iBAAX,EAArB,CAAP;AACD;;AAED,SAAK,MAAMO,aAAX,IAA4BL,aAA5B,EAA2C;AACzC,UAAI,CAACE,MAAMC,OAAN,CAAcE,aAAd,CAAD,IAAiCA,cAAcC,MAAd,KAAyB,CAA9D,EAAiE;AAC/D,eAAOlB,IAAIS,MAAJ,CAAW,GAAX,EAAgBF,IAAhB,CAAqB;AAC1BG,mBACE;AAFwB,SAArB,CAAP;AAID;AACD,YAAMS,MAAMF,cAAc,CAAd,CAAZ;AACA,YAAMG,MAAMH,cAAc,CAAd,CAAZ;;AAEA,YAAMvB,UAAU2B,gBAAV,CACJ,EAAEF,GAAF,EAAOC,GAAP,EAAYd,OAAOJ,OAAnB,EADI,EAEJ,EAAEO,QAAQ,CAAV,EAFI,CAAN;;AAKAd,SAAG2B,IAAH,CAAQ,SAAR,EAAmB;AACjBb,gBAAQ,CADS;AAEjBU,aAAKA,MAAM,CAFM;AAGjBC,aAAKA,MAAM,CAHM;AAIjBd,eAAOJ;AAJU,OAAnB;AAMD;;AAEDF,QAAIS,MAAJ,CAAW,GAAX,EAAgBF,IAAhB,CAAqB,EAAEG,SAAS,6BAAX,EAArB;AACAT;AACD,GAtCD,CAsCE,OAAOO,KAAP,EAAc;AACdR,QAAIS,MAAJ,CAAW,GAAX,EAAgBF,IAAhB,CAAqB,EAAEG,SAASF,MAAME,OAAjB,EAArB;AACD;AACF,CA1CD","file":"SeatController.js","sourcesContent":["const BlockModel = require(\"../models/BlockModel\");\r\nconst SeatModel = require(\"../models/SeatModel\");\r\nconst { io } = require(\"../socket/socket\");\r\n\r\nmodule.exports.Seats = async (req, res, next) => {\r\n  const blockId = req.params.blockId;\r\n  try {\r\n    const seats = await SeatModel.find({\r\n      block: blockId,\r\n    });\r\n    res.json(seats);\r\n    next();\r\n  } catch (error) {\r\n    res.status(500).json({ message: error.message });\r\n  }\r\n};\r\n\r\nmodule.exports.SelectSeats = async (req, res, next) => {\r\n  try {\r\n    const selectedSeats = req.body;\r\n    const blockId = req.params.blockId;\r\n    if (!Array.isArray(selectedSeats)) {\r\n      return res.status(400).json({\r\n        message: \"Invalid request format: selectedSeats must be an array\",\r\n      });\r\n    }\r\n    const block = await BlockModel.findById(blockId);\r\n    if (!block) {\r\n      return res.status(404).json({ message: \"Block not found\" });\r\n    }\r\n\r\n    for (const seatSelection of selectedSeats) {\r\n      if (!Array.isArray(seatSelection) || seatSelection.length !== 2) {\r\n        return res.status(400).json({\r\n          message:\r\n            \"Invalid seat selection format: Each seat selection must be an array with two elements [row, col]\",\r\n        });\r\n      }\r\n      const row = seatSelection[0];\r\n      const col = seatSelection[1];\r\n\r\n      await SeatModel.findOneAndUpdate(\r\n        { row, col, block: blockId },\r\n        { status: 1 }\r\n      );\r\n\r\n      io.emit(\"booking\", {\r\n        status: 1,\r\n        row: row - 1,\r\n        col: col - 1,\r\n        block: blockId,\r\n      });\r\n    }\r\n\r\n    res.status(200).json({ message: \"Seats selected successfully\" });\r\n    next();\r\n  } catch (error) {\r\n    res.status(500).json({ message: error.message });\r\n  }\r\n};\r\n"]}